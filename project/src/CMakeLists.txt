cmake_minimum_required(VERSION 2.8)

include(CMake/library.cmake)

project(GameProject)

message("{CMAKE_CXX_LIBRARY_ARCHITECTURE} = ${CMAKE_CXX_LIBRARY_ARCHITECTURE}")
message("{CMAKE_CXX_LIBRARY_ARCHITECTURE_REGEX} = ${CMAKE_CXX_LIBRARY_ARCHITECTURE_REGEX}")
message("{CMAKE_HOST_SYSTEM_NAME} = ${CMAKE_HOST_SYSTEM_NAME}")
message("{CMAKE_GENERATOR} = ${CMAKE_GENERATOR}")
message("{CMAKE_SYSTEM_PROCESSOR} = ${CMAKE_SYSTEM_PROCESSOR}")

if("${CMAKE_HOST_SYSTEM_NAME}" MATCHES "Windows")
	message("Found Windows!")
	set(SYS_FOUND TRUE)
	if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "AMD64")
		set(SYSTEM "WINDOWS_X64" CACHE STRING "Windows Os" FORCE)
		include(CMake/windows.cmake)
	endif()
elseif("${CMAKE_HOST_SYSTEM_NAME}" MATCHES "Linux")
	message("Found Linux kernel!")
	if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
		message("Linux arch x86_64!")
		set(SYS_FOUND TRUE)
		set(SYSTEM "LINUX_X64" CACHE STRING "Linux Os" FORCE)
		include(CMake/linux.cmake)
	else if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "armv7l") # probably not the most accurate
		message("Linux arch armv7l")
		set(SYS_FOUND TRUE)
		set(SYSTEM "RASPBERRY_PI" CACHE STRING "Arm Os" FORCE)
		include(CMake/raspberrypi.cmake)
	endif()
endif()

if(NOT SYS_FOUND)
	message(FATAL_ERROR "No valid system configuration found")
endif()

if(MSVC)
	set(CMAKE_SYSTEM_VERSION 8.1)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX /W4")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /UMBCS /D_UNICODE /DUNICODE")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
endif()

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

add_subdirectory(thirdparty)
add_subdirectory(libs)
add_subdirectory(apps)
add_subdirectory(test)
