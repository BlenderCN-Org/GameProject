legend:
	<D> = Done
	<W> = Working
	- = thing to do
	<N> = might not happen

2017-01-30's to-do:

	<D>Create gameobjects where meshes and states are stored
		<W>position state, animation state, etc
	<W>Export uv, normals, and colors with mesh exporter for blender
		<W>UV coords
		<D>Normals
		<W>Colors

2017-01-29's to-do:
	
	<D>Add requested loading of meshes.
	<D>Make the main menu togglable after game has started.
	<D>Make managers global. So that no stupid core access is needed. maybe exception for memory manager? (since it need to be sorta thread safe)
	<D>Remove "release" from non interface and non singelton instances
	<D>Disable movement while in main menu
	<D>Make asset manager use and load custom model format
	<D>Added export orientation settings for blender export script
	<D>Displaying fps numbers


Editor todo:
	Next need to make gamewindow borderless and auto resize to editor window.
	Add panels for scene, object list.
	Add dialogs for mesh preview, text editor, object properites.


	Window notes:

		Drag window with single user stuff dock (dock have border to move window)
		DragWindow -> grid -> DockPanel (UC) -> User stuff

		Drag window with multiple user stuff dock (window have border for move)
		DockPanel have no border, DockPanel1 and DockPanel2 have 
		DragWindow -> grid -> DockPanel (UC) -> DockPanel1 -> User stuff
											 -> DockPanel2 -> User stuff

		

Game Project todo:

	<D>Have a simple demo world that can be loaded and changed offline

	-Gui stuff
		-Change TextArea to use mask texture, instead of stencil buffer (performance)
		-TextArea scrollable text, (horz & vert)
		-Gui focus control
		<N>Gui quad instances (might be better with immediate)

	<W>Rework custom allocators

	-Threading
		-add sync point. stall main thread until all worker threads are done etc
		-add more assets to task loading.
		-add more tasks, like save to file, actions, other data processing, physics, script execution.

	-Text
		-access to renderEngine
		-formatting
			-per character color
			-numbers
			-strings
			-textures(icons) ?
		
RenderEngine todo:
	-Fix fullscreen mode
	<W>Fix crash if mesh data size is equal to zero (Render Engine)
	-Fix errors if mesh data is not set
	-Support for unicode characters (font map)

	<N>Make font scale on resolution (not sure if needed)

AssetLib todo:
	<N>Custom format
	<N>DataPacking and unpacking

Other Notes:

Other Gui types
	Buttons
	CheckBox
	Lists
	ComboBox
	Tree
	ColorChooser
	ModelPreview
	Simple TextField
	Label
	ProgressBar

Loader implementation (threadable)
	textures
	models
	animations
	etc.

Scripting
	lexer and parser
	codegen? (bytecode)
	scripting in console
	various batch jobs
		like world interaction
		background jobs


Asset
	// allways (base asset)
	uint32_t dataSize;
	void* dataPtr;

	uint32_t assetID;
	enum assetType;
	enum assetState; (loaded, unloaded, etc)

	// asset specific
	int32_t width, height;	// texure only
	int32_t nrKeyFrames;	// animation only
	int32_t nrBones;		// animation only



Asset creation
	mainThread creates asset object.
	Task is created to move data to asset object.
		task copies data (from file, memory or network)
		task notify asset object it is host complete (CPU side)
		task terminates and worker thread waits for new task
	mainThread check if asset object is complete when rendering or other parts of code needs it
		if not complete nothing should happen
